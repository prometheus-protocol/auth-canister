name: CI

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - reopened
      - edited
      - synchronize

jobs:
  # =================================================================
  # Job 1: Run fast Motoko unit tests first
  # =================================================================
  unit-tests:
    name: Motoko Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: 1. Check out repository (main repo only)
        uses: actions/checkout@v4
        # We do NOT initialize submodules here.

      - name: 2. Setup SSH Agent with Multiple Keys
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.DEPLOY_KEY_ICRC118 }}
            ${{ secrets.DEPLOY_KEY_ICRC120 }}

      - name: 3. Initialize and update submodules
        # Now that the SSH agent is configured, we can fetch the submodules.
        run: git submodule update --init --recursive

      - name: 4. Create Symlink for ICRC-118 Compatibility
        # This creates a "shortcut" so the hardcoded import in icrc120
        # can find the icrc118 library at the path it expects.
        run: |
          cd libs
          ln -s icrc118 ICRC118WasmRegistry-mo
          cd ..

      - name: 4. Setup Mops
        uses: ZenVoich/setup-mops@v1
        with:
          mops-version: 1

      - name: 5. Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: 6. Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 7. Setup DFX
        uses: dfinity/setup-dfx@main

      - name: 8. Install Dependencies
        run: pnpm install

      - name: 9. Install Mops Dependencies
        run: mops install

      - name: 10. Run Motoko Tests
        run: pnpm test:mo
        # This uses our package.json script to run `mops test` in all canister packages

  picjs-tests:
    name: PicJS Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: 1. Check out repository (main repo only)
        uses: actions/checkout@v4
        # We do NOT initialize submodules here.

      - name: 2. Setup SSH Agent with Multiple Keys
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.DEPLOY_KEY_ICRC118 }}
            ${{ secrets.DEPLOY_KEY_ICRC120 }}

      - name: 3. Initialize and update submodules
        # Now that the SSH agent is configured, we can fetch the submodules.
        run: git submodule update --init --recursive

      - name: 4. Create Symlink for ICRC-118 Compatibility
        # This creates a "shortcut" so the hardcoded import in icrc120
        # can find the icrc118 library at the path it expects.
        run: |
          cd libs
          ln -s icrc118 ICRC118WasmRegistry-mo
          cd ..

      - name: 4. Setup Mops
        uses: ZenVoich/setup-mops@v1
        with:
          mops-version: 1

      - name: 5. Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: 6. Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 7. Setup DFX
        uses: dfinity/setup-dfx@main

      - name: 8. Install Dependencies
        run: pnpm install

      - name: 9. Install Mops Dependencies
        run: mops install

      - name: 10. Start Local Replica
        run: dfx start --background --clean

      - name: 11. Deploy All Canisters
        run: dfx deploy

      - name: 12. Run PicJS Tests
        run: pnpm test:canisters

      - name: 13. Stop Local Replica
        if: always() # Ensure this runs even if tests fail
        run: dfx stop

  # =================================================================
  # Job 2: Run slower E2E tests only if unit tests pass
  # =================================================================
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, picjs-tests]

    steps:
      - name: 1. Check out repository (main repo only)
        uses: actions/checkout@v4
        # We do NOT initialize submodules here.

      - name: 2. Setup SSH Agent with Multiple Keys
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.DEPLOY_KEY_ICRC118 }}
            ${{ secrets.DEPLOY_KEY_ICRC120 }}

      - name: 3. Initialize and update submodules
        # Now that the SSH agent is configured, we can fetch the submodules.
        run: git submodule update --init --recursive

      - name: 4. Create Symlink for ICRC-118 Compatibility
        # This creates a "shortcut" so the hardcoded import in icrc120
        # can find the icrc118 library at the path it expects.
        run: |
          cd libs
          ln -s icrc118 ICRC118WasmRegistry-mo
          cd ..

      - name: 4. Setup Mops
        uses: ZenVoich/setup-mops@v1
        with:
          mops-version: 1

      - name: 5. Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: 6. Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 7. Setup DFX
        uses: dfinity/setup-dfx@main

      - name: 8. Install Dependencies
        run: pnpm install

      - name: 9. Install Mops Dependencies
        run: mops install

      - name: 10. Start Local Replica
        run: dfx start --background --clean

      - name: 11. Deploy All Canisters
        run: dfx deploy

      - name: 12. Run E2E Tests
        run: pnpm test:e2e

      - name: 13. Stop Local Replica
        if: always() # Ensure this runs even if tests fail
        run: dfx stop

  # =================================================================
  # Job 3: Aggregate status for a single required check
  # =================================================================
  ci-status-check:
    name: CI Status Check
    if: always()
    needs: [unit-tests, picjs-tests, e2e-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Check status of all jobs
        if: ${{ needs.unit-tests.result != 'success' || needs.picjs-tests.result != 'success' || needs.e2e-tests.result != 'success' }}
        run: exit 1
